Lab 2 Software Básico - João Pedro Biscaia Fernandes

1-a)Ao compilar e rodar o código, o terminal mostra a seguinte mensagem:
0x7ffcf9afad24 - 10
0x7ffcf9afad25 - 27
0x7ffcf9afad26 - 00
0x7ffcf9afad27 - 00

Isso mostra que, de acordo com a funcionalidade da função, um int possui 4 bytes, organizados de forma little endian, ou seja, o byte menos significativo apareceu antes, até o mais.

b-) Alterando i para ser um long, compilando e rodando:
0x7ffd2d516f60 - 10
0x7ffd2d516f61 - 27
0x7ffd2d516f62 - 00
0x7ffd2d516f63 - 00
0x7ffd2d516f64 - 00
0x7ffd2d516f65 - 00
0x7ffd2d516f66 - 00
0x7ffd2d516f67 - 00

Ao ver isso, vemos que um long ocupa 8 bytes na memória, organizados também na forma little endian.

c-)Ao mudar i para ser um short, ao compilar e rodar:
0x7ffd4f3d2f66 - 10
0x7ffd4f3d2f67 - 27

Logo, short ocupa 2 bytes na memória.

d-) Fazendo a mesma tática:
0x7ffd56b94f47 - 10

Logo, um char ocupa 1 byte, logo o valor restante de 10000 é perdido, pois o maior valor possível para ocupar um char é 255.

Ao atribuir 'a' e 97, recebo o mesmo valor em hexadecimal x61, que é 97 em hexadecimal.

e-)Compilando e Rodando:
0x7fff89a782e3 - 37
0x7fff89a782e4 - 35
0x7fff89a782e5 - 30
0x7fff89a782e6 - 39
0x7fff89a782e7 - 00

Como a string é um vetor de caracteres, vai ocupar a quantidade de bytes equivalente a quantos chars teria, + 1 byte ocupado por 00.

Ao testar o código, vemos que o valor de 'A' na tabela ASCII é 65, ' ' é 32, '\n' é 10 e '$' é 36.

2-)
a-)A função string2num transforma uma string em um número.
Isso ocorre da seguinte maneira:
a função recebe como parâmetro um ponteiro para caracteres s, que irá iterar até se tornar NULL, passando 1 byte a cada iteraçã.
Dentro de cada iteração no loop, uma variável inteira a local(inicializada como 0) será multiplicada por 10(por cada casa que o número tiver), sendo somada pelo valor da diferença entre o atual char s e o char '0', retornando o valor como número a ser somado a a*10.


b-) Modificando a função, fica da seguinte maneira:
int string2num (char *s, int base) {
  int a = 0;
  for (; *s; s++)
    a = a*base + (*s - '0');
  return a;
}

Ao rodar o código, recebo como output:
==> 511
==> 777

c-) Alterando a função para ver se é um byte
int string2num (char *s, int base) {
  int a = 0;
  for (; *s; s++)
    if(isdigit(*s)){
      a = a*base + (*s-'0');
    }else{
      a = a*base + (*s - 87);
    }
  return a;
}

Com os seguintes testes: 
  printf("%d\n", string2num("1a", 16));
  printf("%d\n", string2num("a09b", 16));
  printf("%d\n", string2num("z09b", 36));


Recebo no terminal o seguinte output:
==> 26
==> 41115
==> 1633295

Com isso, podemos usar a maior base como 36, pois é o que representa o dígito 35 na tabela ASCII, sendo o último possível de ser usado como char.